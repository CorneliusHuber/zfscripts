#!/bin/bash

configs=config                                          # Folder containing all configs
pwfile=$configs/.zfs_benchmark_pwfile                   # File wich acts as a passwordfile,
                                                        # Automatically generated.
algofile=$configs/algorithms                            # Contains all tested algorithms,
                                                        # This could include 'off' for no encryption.
copy_path=$configs/copy_folder                          # This folder ist copied during the benchmark
mount_point=/mnt/zfs_encryption_benchmark
end_mount_point=_zfs_benchmark
time_command_line_1="CPU-seconds user mode:      %U\n"
time_command_line_2="CPU-seconds in kernel mode: %S\n"
time_command_line_3="Elapsed real time:          %e"
time_command=$time_command_line_1$time_command_line_2$time_command_line_3


check_pwfile() {

    if [[ ! -f $pwfile ]]; then
        create_pwfile
    fi 


}

create_pwfile() {

    dd if=/dev/urandom of=$pwfile bs=1 count=32

}


create_dataset() {

    algorithm=$1
    echo "algorithm:    "$algorithm
    echo "passworfile:  "$pwfile
    echo "dataset name: "$pool_name/${algorithm}$end_mount_point
    dataset_name=$pool_name/${algorithm}$end_mount_point
    zfs create -o mountpoint=$mount_point/$algorithm$end_mount_point -o encryption=$algorithm -o keyformat=raw -o keylocation=file://$(pwd)/$pwfile $dataset_name

}

destroy_dataset() {

    algorithm=$1
    echo "destroying "$pool_name/${algorithm}$end_mount_point"."
    zfs destroy $pool_name/${algorithm}$end_mount_point

}

destroy_all_benchmark_datasets() {

    for algorithm in $(cat $algofile); do
        destroy_dataset $algorithm
    done
    exit

}

remove_mount_points() {

    for algorithm in $(cat $algofile); do
        folder=$mount_point$algorithm
        if [[ -d $folder ]]; then
            rmdir $folder
        fi
    done
    rmdir $mount_point

}

exit_funct() {

    # first of all, destroy all new created datasets
    destroy_all_benchmark_datasets

    # then remove all mount points.
    remove_mount_points


}

copy_folder() {

    target=$1
    echo "target: "$target
    echo "Copy path: "$copy_path
    /usr/bin/time rsync -a $copy_path/ $target/

}

trap exit_funct EXIT

# Export TIME variable for the time command
export TIME=$time_command
#echo "TIME_command="$time_command


# First argument is the name of the pool
if [[ -z $1 ]]; then
    echo "No pool name given. Exiting."
    exit 1
else 
    pool_name=$1
    echo "testing pool "$pool_name
    echo
fi

if [[ $2 == '--create_pw_file' ]]; then
    create_pwfile
else
    check_pwfile
fi

for algorithm in $(cat $algofile); do
    folder=$mount_point${algofile}$end_mount_point
    if [[ ! -d $folder ]]; then
        mkdir -p $folder
    fi

    create_dataset $algorithm
    copy_folder $mount_point/$algorithm$end_mount_point
    echo
done
